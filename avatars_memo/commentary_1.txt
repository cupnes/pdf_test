[PDF解説-1] PDFのデータ構造について

実は、PDFはデータ部分やヘッダ情報の一部を除いて、ほぼ全てがプレーンテキストでできています。
なので、テキストエディタで読んだり編集したりできるのです。

このPDFをテキストエディタで開いてみてください。

詳しい説明は省きますが、PDFはobj〜endobjで定義される様々なオブジェクトの集合です。

例えば、このPDFの先頭には以下の記述が有ります。
==
%PDF-1. 4
1 0 obj
	<<	/Type /Catalog
		/Outlines 2 0 R
		/Pages 3 0 R
	>>
endobj
==
なお、本PDFは読みやすさのために適宜インデントや改行を入れていますが、
インデントや改行に仕様として決まりはありません。
(お手元の適当なPDFを開いてみると、インデントが入っていなかったりすると思います。)

この「1 0 obj」から「endobj」までで1つのオブジェクトを定義しています。
「1 0 obj」の「1」はオブジェクト番号、「0」は世代番号、「obj」はオブジェクトの定義が始まることを示す接尾辞です。
世代番号はたいてい0で、新たにオブジェクトを追加するときも0にしておけば問題ありません。
このPDFでも0以外の世代番号は出てきません。

そして、「<<」から「>>」の中の記述が、このオブジェクトが何なのかを定義しています。

「/Type /Catalog」の部分で、このオブジェクトが「カタログ」というオブジェクトであると定義しています。

PDFのオブジェクトは(PDFバージョンにも寄りますし、その他にも有りますが、基本的に、)以下のような階層構造になっています。

- カタログ(/Type /Catalog)
  - アウトライン(/Type /Catalog)
  - ページ集合(/Type /Pages)
    - ページ(/Type /Page)
      - ストリーム
    - ページ(/Type /Page)
    - ...

「ストリーム」は、そのページに表示するテキストデータや画像、あるいはフォントデータ等のデータ自体を示すもので
以下のように定義します。

==
33 0 obj
	<<	>>
stream
...
endstream
endobj
==

ストリームの種類にもよりますが、ストリームの場合、上記のように「<<」から「>>」の間は空の場合も有ります。
「stream」から「endstream」の間にそのデータ自体が書かれます。なので画像やフォント等のバイナリデータの場合、
テキストエディタで開くと、この部分は文字化けしたような表示になります。
